// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolAPI.Models;

namespace SchoolAPI.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20210818051550_V2")]
    partial class V2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SchoolAPI.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Credits")
                        .HasColumnType("int")
                        .HasColumnName("credits");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("CourseID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            CourseID = 1,
                            Credits = 2000000,
                            DepartmentID = 7,
                            Title = "Thiet ke mau"
                        },
                        new
                        {
                            CourseID = 2,
                            Credits = 3000000,
                            DepartmentID = 2,
                            Title = "Giao duc the chat"
                        },
                        new
                        {
                            CourseID = 3,
                            Credits = 4000000,
                            DepartmentID = 3,
                            Title = "Quoc phong"
                        },
                        new
                        {
                            CourseID = 4,
                            Credits = 5000000,
                            DepartmentID = 7,
                            Title = "Thiet ke web"
                        },
                        new
                        {
                            CourseID = 5,
                            Credits = 5000000,
                            DepartmentID = 7,
                            Title = "Quan tri co so du lieu"
                        });
                });

            modelBuilder.Entity("SchoolAPI.Models.CourseAssignment", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int")
                        .HasColumnName("instructor_id");

                    b.HasKey("CourseID", "InstructorID");

                    b.HasIndex("InstructorID");

                    b.ToTable("CourseAssignment");

                    b.HasData(
                        new
                        {
                            CourseID = 1,
                            InstructorID = 2
                        },
                        new
                        {
                            CourseID = 5,
                            InstructorID = 1
                        },
                        new
                        {
                            CourseID = 3,
                            InstructorID = 2
                        },
                        new
                        {
                            CourseID = 2,
                            InstructorID = 3
                        },
                        new
                        {
                            CourseID = 4,
                            InstructorID = 1
                        });
                });

            modelBuilder.Entity("SchoolAPI.Models.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("department_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("budget");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int")
                        .HasColumnName("instructor_id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.HasKey("DepartmentID");

                    b.HasIndex("InstructorID");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentID = 1,
                            Budget = 3000000m,
                            InstructorID = 1,
                            Name = "English",
                            StartDate = new DateTime(2021, 8, 18, 12, 15, 50, 279, DateTimeKind.Local).AddTicks(5280)
                        },
                        new
                        {
                            DepartmentID = 2,
                            Budget = 3000000m,
                            InstructorID = 2,
                            Name = "Computer Science",
                            StartDate = new DateTime(2021, 8, 18, 12, 15, 50, 279, DateTimeKind.Local).AddTicks(6298)
                        },
                        new
                        {
                            DepartmentID = 3,
                            Budget = 3000000m,
                            InstructorID = 3,
                            Name = "Scince",
                            StartDate = new DateTime(2021, 8, 18, 12, 15, 50, 279, DateTimeKind.Local).AddTicks(6304)
                        },
                        new
                        {
                            DepartmentID = 4,
                            Budget = 3000000m,
                            InstructorID = 1,
                            Name = "Social Studies",
                            StartDate = new DateTime(2021, 8, 18, 12, 15, 50, 279, DateTimeKind.Local).AddTicks(6305)
                        },
                        new
                        {
                            DepartmentID = 5,
                            Budget = 3000000m,
                            InstructorID = 2,
                            Name = "Theology",
                            StartDate = new DateTime(2021, 8, 18, 12, 15, 50, 279, DateTimeKind.Local).AddTicks(6307)
                        },
                        new
                        {
                            DepartmentID = 6,
                            Budget = 3000000m,
                            InstructorID = 3,
                            Name = "Mathematics",
                            StartDate = new DateTime(2021, 8, 18, 12, 15, 50, 279, DateTimeKind.Local).AddTicks(6308)
                        },
                        new
                        {
                            DepartmentID = 7,
                            Budget = 3000000m,
                            InstructorID = 1,
                            Name = "IT",
                            StartDate = new DateTime(2021, 8, 18, 12, 15, 50, 279, DateTimeKind.Local).AddTicks(6309)
                        });
                });

            modelBuilder.Entity("SchoolAPI.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("enrollment_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<int>("Grade")
                        .HasColumnType("int")
                        .HasColumnName("grade");

                    b.Property<int>("StudentID")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("SchoolAPI.Models.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("instructor_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstMidName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_mid_name");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("hire_date");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.HasKey("ID");

                    b.ToTable("Instructor");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            FirstMidName = "Son Kim Quang",
                            HireDate = new DateTime(2021, 8, 18, 12, 15, 50, 279, DateTimeKind.Local).AddTicks(3340),
                            LastName = "Thach"
                        },
                        new
                        {
                            ID = 2,
                            FirstMidName = "Ngoc Tam",
                            HireDate = new DateTime(2021, 8, 18, 12, 15, 50, 279, DateTimeKind.Local).AddTicks(4298),
                            LastName = "Vo"
                        },
                        new
                        {
                            ID = 3,
                            FirstMidName = "Van A",
                            HireDate = new DateTime(2021, 8, 18, 12, 15, 50, 279, DateTimeKind.Local).AddTicks(4305),
                            LastName = "Nguyen"
                        },
                        new
                        {
                            ID = 4,
                            FirstMidName = "Thoai",
                            HireDate = new DateTime(2021, 8, 18, 12, 15, 50, 279, DateTimeKind.Local).AddTicks(4306),
                            LastName = "Chi"
                        });
                });

            modelBuilder.Entity("SchoolAPI.Models.OfficeAssignment", b =>
                {
                    b.Property<int>("InstructorID")
                        .HasColumnType("int")
                        .HasColumnName("instructor_id");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("location");

                    b.HasKey("InstructorID");

                    b.ToTable("OfficeAssignment");
                });

            modelBuilder.Entity("SchoolAPI.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("student_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enrollment_date");

                    b.Property<string>("FirstMidName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_mid_name");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.HasKey("ID");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EnrollmentDate = new DateTime(2021, 8, 18, 12, 15, 50, 277, DateTimeKind.Local).AddTicks(543),
                            FirstMidName = "Nhat Nam",
                            LastName = "Hoang"
                        },
                        new
                        {
                            ID = 2,
                            EnrollmentDate = new DateTime(2021, 8, 18, 12, 15, 50, 278, DateTimeKind.Local).AddTicks(640),
                            FirstMidName = "Nhat Minh",
                            LastName = "Thi"
                        },
                        new
                        {
                            ID = 3,
                            EnrollmentDate = new DateTime(2021, 8, 18, 12, 15, 50, 278, DateTimeKind.Local).AddTicks(658),
                            FirstMidName = "Viet Hung",
                            LastName = "Ngo"
                        },
                        new
                        {
                            ID = 4,
                            EnrollmentDate = new DateTime(2021, 8, 18, 12, 15, 50, 278, DateTimeKind.Local).AddTicks(660),
                            FirstMidName = "Duc Thai",
                            LastName = "Luu"
                        });
                });

            modelBuilder.Entity("SchoolAPI.Models.Course", b =>
                {
                    b.HasOne("SchoolAPI.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SchoolAPI.Models.CourseAssignment", b =>
                {
                    b.HasOne("SchoolAPI.Models.Course", "Course")
                        .WithMany("CourseAssignment")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAPI.Models.Instructor", "Instructor")
                        .WithMany("CourseAssignment")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("SchoolAPI.Models.Department", b =>
                {
                    b.HasOne("SchoolAPI.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("SchoolAPI.Models.Enrollment", b =>
                {
                    b.HasOne("SchoolAPI.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAPI.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolAPI.Models.OfficeAssignment", b =>
                {
                    b.HasOne("SchoolAPI.Models.Instructor", "Instructor")
                        .WithOne("OfficeAssignment")
                        .HasForeignKey("SchoolAPI.Models.OfficeAssignment", "InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("SchoolAPI.Models.Course", b =>
                {
                    b.Navigation("CourseAssignment");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("SchoolAPI.Models.Department", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("SchoolAPI.Models.Instructor", b =>
                {
                    b.Navigation("CourseAssignment");

                    b.Navigation("OfficeAssignment");
                });

            modelBuilder.Entity("SchoolAPI.Models.Student", b =>
                {
                    b.Navigation("Enrollments");
                });
#pragma warning restore 612, 618
        }
    }
}
